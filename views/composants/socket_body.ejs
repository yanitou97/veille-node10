<h2>Clavardage</h2>
<section id="enregistrement">
 <input type="text">
 <button onclick="enregistrement()">Enregistrement</button>
</section>
<section id="chat" style="display: none">
 <table id="list_user"></table>
 <table id="message"></table>
 <section id="message_a_transmettre">
 	<input type="text" name="txtMessage"><button onclick="transmettre_mon_message()">Transmettre</button>
 </section>	
</section>


<script type="text/javascript">
 /* 
Pour établir une communication socket il faut un premier appel de
 la fonction io()
 Cette fonction est incluse dans la librairie socket.io. 
 Cette fonction déclenche un événement connect vers le serveur
 */
 let socket;
 window.onload = ()=>{
	 socket = io();
	 //console.log(socket.id);
	 socket.on('connect', function(){
	 console.log('Le socket id = ' + socket.id); 
	 /* l'événement ackUser a été transmis par le serveur */ 
	 socket.on('valide_user', function(data){
	 	console.log('data en provenance du serveur = ' + data.user)
	 	let elmEnregistrement = document.getElementById('enregistrement')
	 	elmEnregistrement.style.display = 'none';
	 	let elmChat = document.getElementById('chat')
	 	elmChat.style.display = 'flex';
	 })

	 socket.on('diffuser_list_user', function(data){
	 	afficher_table_user(data);
	 })

	 socket.on('valide_message', function(data){
	 	console.log('valide_message = ' + data.message)
	 	afficher_mon_message(data, '#0f0');
	 })

	 socket.on('diffuser_message', function(data){
	 	console.log('diffuser_message = ' + data.message)
	 	afficher_mon_message(data, '#0ff');
	 })

 });
 }
/* ---------------------------------------------------------- */
 function enregistrement(){	
 let elmUser = document.querySelector('#enregistrement input')
 console.log(elmUser.value)
 /* l'événement « setUser » est transmit avec un objet 
 */
 socket.emit('setUser', {user : elmUser.value})

 }

 function afficher_table_user(data){
 	let sChaine = '<tr><th>ID</th><th>Nom</th></tr>';
	 	for(id in data){
	 		sChaine += '<tr>'
	 				+  '<td>' + id + '</td>'
	 				+  '<td>' + data[id] + '</td>'
	 				+  '</tr>'
	 			
	 	}
	 	let elmListUser = document.getElementById('list_user')
	 	elmListUser.innerHTML = sChaine	
 }

 function transmettre_mon_message(){
	let elmMessage = document.querySelector("#message_a_transmettre input");
	socket.emit('setMessage', {message : elmMessage.value})
	elmMessage.value = "";
}

 function afficher_mon_message(data, couleur){
 	let elmUser = document.querySelector('#enregistrement input');
 	let elmTable = document.querySelector("#message");
 	let elmMessage = document.querySelector("#message_a_transmettre input");

 	//console.log(elmUser)
 	//console.log(elmTable)
 	//console.log(elmMessage)
 	console.log('utilisateur: ' + data.user + ', message: ' + data.message);
 	let tr = document.createElement("TR");
    for (let i=0;i<2;i++){
        let td = document.createElement("TD");
        if(i==0){
            td.innerHTML = data.user + ': '
        }
        if(i==1){
            td.innerHTML = data.message
        }
        console.log(tr);
        td.style.color = couleur;
        tr.appendChild(td);
    }
    elmTable.appendChild(tr)
 	//let sMsg = '<tr><td>'+ data.user +': </td><td>'+ data.message +'</td></tr>'
 	//elmTable.innerHTML += sMsg
 }
</script>